{
  "name": "TriTimeTracker",
  "tagline": "fall2016-project-jakep11 created by GitHub Classroom",
  "body": "## Purpose.\r\nThe TriTimeTracker is a web application that serves to track previous Triathlon times, provide statistics, and estimate future triathlons. The web app allows for the creation of multiple user accounts and will store each individuals data. This project was created as a class project for CPE 305 Individual Software Design and Development at Cal Poly San Luis Obispo.\r\n\r\n## Walk Through\r\n\r\nHome Screen\r\n\r\n![](http://i.imgur.com/KSYzu1s.jpg)\r\n\r\nCreate a unique account\r\n![](http://i.imgur.com/rcs9DQ1.jpg)\r\n\r\nAdd a previous triathlon\r\n![](http://i.imgur.com/vqsbuFz.jpg)\r\n\r\nView all previous triathlons\r\n![](http://i.imgur.com/XXnhamd.jpg)\r\n\r\nView stats calculated for each triathlon\r\n![](http://i.imgur.com/1TBJ1sT.jpg)\r\n\r\nEstimate your time for a future Triathlon\r\n![](http://i.imgur.com/1LetnFO.jpg)\r\n\r\n## Architecture\r\nThe software uses a Service-Oriented architecture as pictured below. The backend REST API is built with the Java Spring Framework and the frontend is built with AngularJS.\r\n\r\n![](http://i.imgur.com/eJqhLVa.jpg)\r\n\r\n## Technologies/Tools Used\r\nTechnologies/languages:\r\n* Java 8\r\n* Spring Framework\r\n* AngularJS\r\n* Bootstrap\r\n\r\nTools:\r\n* Eclipse\r\n* Maven\r\n* Sonarqube\r\n* Travis CI\r\n* Checkstyle (Google Style Guide for Java)\r\n* GitHub (obviously if you are reading this)\r\n\r\n### Design Patterns\r\n1. Singleton Pattern (Database instance and JPA Repositories)\r\n\r\n## Design Patterns I Should Have Used\r\n1. Decorator Pattern \r\n2. State Pattern\r\n\r\n\r\n## Why My Design is Robust\r\n1. Completely Decoupled REST API and User Interface\r\n    * The REST API can be paired with any frontend User Interface such as an Android or iOS app instead of a webpage\r\n\r\n## Key Takeaways \r\n1. Design Patterns allow for a much higher flexibility for the future (DesignStaminaHypothesis)\r\n    * I had a set idea of the data structure to use for a Triathlon and it made it easy to implement.\r\n    * If I wanted to extend it in the future, it would be rather difficult since I didn't use a design pattern for the implementation of it's attributes\r\n2. Java Spring Framework is a pain. There is a ton of \"convention over configuration\" that makes it easy to do a ton of \"magic\" with little code but makes extension from the default, very difficult. For example, setting up the database and user authentication was a nightmare.\r\n\r\n\r\n\r\n\r\n### Support or Contact\r\nHaving trouble with TriTimeTracker? Check out the [project](https://github.com/cpe305/fall2016-project-jakep11) or [contact support](mailto:jjpicket@calpoly.edu) and weâ€™ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}